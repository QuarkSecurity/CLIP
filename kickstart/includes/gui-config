# this file performs all the tweaks that are
# typically only necessary when a gui is present

DCONF_LOCKS="/etc/dconf/db/local.d/locks/settings"

# apply both gsettings, system-wide dconf settings, and dconf locks
# $1 = path to key in gsettings-style (i.e. dots instead of slashes)
# $2 = key
# $3 = value for key
function gnome_lock() {
	# convert gsettings-formatted str to dconf-formatted str
	local dconf_str=$(echo "$1" | sed -e 's;\.;/;g')

	/usr/bin/gsettings set "$1" "$2" "$3"
	/usr/bin/sudo -u ${USERNAME} gsettings set "$1" "$2" "$3"

	# make them system-wide as well
	test -f /etc/dconf/db/local.d/${1} || echo "[${dconf_str}]" > /etc/dconf/db/local.d/${1}
	local val="'$3'"
	if [[ $3 =~ (^[0-9]+$) ]]; then
		val="uint32 $3"
	elif [[ $3 =~ (true|false) ]]; then
		val=$3
	fi
	/usr/bin/echo "$2=$val" >> /etc/dconf/db/local.d/${1}

	/usr/bin/echo "/${dconf_str}/$2" >> "$DCONF_LOCKS"
}

# NOTE 1: some gsetting/dconf lock-downs are accompanied by things
# like removing panel desktop entries for control center. look for the
# conditional block belofre for CONFIG_BUILD_BREAK_GUI for those as removing
# those panels could cause breakage and definitely causes error messages in logs.
# NOTE 2: don't muck with the filenames here, some of them are specific to address SCAP checks
if [ x"$CONFIG_BUILD_ENABLE_GUI" == "xy" ]; then

	# prep for gsettings + dconf locks + go ahead and add .cache so it exists before gdm comes up to avoid a write to user_home_t in policy
	/usr/bin/mkdir -p /home/${USERNAME}/{.config,.cache}
	/usr/bin/chown -R ${USERNAME}:${USERNAME} /home/${USERNAME}/{.config,.cache}
	/usr/bin/mkdir -p "$(dirname $DCONF_LOCKS)"

	# BAD SCAP!
	# SCAP breaks the login banner and every single other use of dconf
	# since it inserts newlines instead of \n into the login banner field
	/usr/bin/mkdir -p /etc/dconf/db/gdm.d
	# don't show users
	/usr/bin/echo -e "[org/gnome/login-screen]\ndisable-user-list=true" > /etc/dconf/db/gdm.d/00-security-settings
	# fixup displaying of banner
	/usr/bin/echo "banner-message-enable=true" >> /etc/dconf/db/gdm.d/00-security-settings
	/usr/bin/echo "banner-message-text='$(sed -e 's/^$/\\n/g' /etc/issue|tr '\n' ' ')'" >> /etc/dconf/db/gdm.d/00-security-settings
	# make scap happy while making me sad
	/usr/bin/echo "enable-smartcard-authentication=true" >> /etc/dconf/db/gdm.d/00-security-settings	

	# SSG in v7.6 applies a few screensaver/display lockdowns correctly so skip those
	#gnome_lock org.gnome.desktop.session idle-delay 300
	#gnome_lock org.gnome.desktop.screensaver lock-delay 0
	#gnome_lock org.gnome.desktop.screensaver lock-enabled true

	# FIXME: if our system-wide settings in gnome_lock are working, the manual echo commands here can be removed
	# this doesn't seem to work via just gsettings. the dconf lock is applied, but the value is true even after the commands complete successfully
	# so manually apply a default value in the dconf db.
	gnome_lock org.gnome.desktop.screensaver user-switch-enabled false	
	#echo "[org/gnome/desktop/screensaver]" > /etc/dconf/db/local.d/01-screensaver
	#echo "user-switch-enabled=false" >> /etc/dconf/db/local.d/01-screensaver

	# i am not sure of the security benefit or functional impact these laptop-specific controls ultimately have
	# but just incase these aren't related to the screensaver timeouts go ahead and set and lock
	gnome_lock org.gnome.settings-daemon.plugins.power sleep-inactive-ac-timeout 900
	gnome_lock org.gnome.settings-daemon.plugins.power sleep-inactive-ac-type interactive
	gnome_lock org.gnome.settings-daemon.plugins.power sleep-inactive-battery-timeout 900
	gnome_lock org.gnome.settings-daemon.plugins.power sleep-inactive-battery-type interactive

	# privacy panel in control center
	gnome_lock org.gnome.system.location enabled false
	gnome_lock org.gnome.desktop.privacy remember-recent-files false

	gnome_lock org.gnome.desktop.notifications show-in-lock-screen false

	# currently i don't plan on giving user->NM dbus comms via SELinux, 
	# but still apply the locks in case that changes
	gnome_lock org.gnome.nm-applet disable-vpn-notifications true
	gnome_lock org.gnome.nm-applet disable-wifi-create true

	# systemd's timedated is nasty. any dbus comms with it cant change things like
	# timezone, ntpd/chronyd, and maybe others. this doesn't fix all of that, but it does prevent time zone toggling
	gnome_lock org.gnome.desktop.datetime automatic-timezone false

	gnome_lock org.gnome.desktop.interface clock-show-date true

	gnome_lock org.gnome.desktop.media-handling autorun-never true
	gnome_lock org.gnome.desktop.media-handling automount false

	gnome_lock org.gnome.desktop.lockdown disable-application-handlers true
	gnome_lock org.gnome.desktop.lockdown disable-command-line true
	gnome_lock org.gnome.desktop.lockdown disable-print-setup true
	gnome_lock org.gnome.desktop.lockdown disable-printing true
	gnome_lock org.gnome.desktop.lockdown disable-user-switching true
	gnome_lock org.gnome.desktop.lockdown user-administration-disabled true

	# omg you can install extensions via a web browser.
	# NB: although RH's docs clearly differentiate between system extensions
	# and user extensions the actual implementation treats them all as user extensions
	# so, if you want even system extensions to work you have to enable user extensions
	# and development tools
	# RH states that the approach to use when you need extensions is to leave both on,
	# and use a comprehensive extension list and place a dconf lock on the list.
	gnome_lock org.gnome.shell disable-user-extensions true
	gnome_lock org.gnome.shell development-tools false
	#gnome_lock org.gnome.shell disable-user-extensions false
	#gnome_lock org.gnome.shell development-tools true

	gnome_lock org.gnome.desktop.wm.keybindings panel-run-dialog "[]"
	gnome_lock org.gnome.desktop.wm.keybindings panel-main-menu "[]"	

	gnome_lock org.gnome.desktop.search-providers disable-external true

	# we strip out fonts and end up with a horrific font as the default.
	# set defaults to something decent
	# NOTE: we're not currently applyig dconf locks on these. if we do, switch to gnome_lock
	/usr/bin/gsettings set org.gnome.desktop.interface monospace-font-name 'Liberation Mono 11'
	/usr/bin/sudo -u ${USERNAME} /usr/bin/gsettings set org.gnome.desktop.interface monospace-font-name 'Liberation Mono 11'
	/usr/bin/echo "[org/gnome/desktop/interface]" > /etc/dconf/db/local.d/fonts
	/usr/bin/echo "monospace-font-name='Liberation Mono 11'" >> /etc/dconf/db/local.d/fonts

	/usr/bin/gsettings set org.gnome.desktop.interface font-name 'Liberation Sans 12'
	/usr/bin/sudo -u ${USERNAME} /usr/bin/gsettings set org.gnome.desktop.interface font-name 'Liberation Sans 12'
	/usr/bin/echo "[org/gnome/desktop/interface]" >> /etc/dconf/db/local.d/fonts
	/usr/bin/echo "font-name='Liberation Sans 12'" >> /etc/dconf/db/local.d/fonts

	/usr/bin/gsettings set org.gnome.desktop.interface document-font-name 'Liberation Serif 12'
	/usr/bin/sudo -u ${USERNAME} /usr/bin/gsettings set org.gnome.desktop.interface document-font-name 'Liberation Serif 12'
	/usr/bin/echo "[org/gnome/desktop/interface]" >> /etc/dconf/db/local.d/fonts
	/usr/bin/echo "document-font-name='Liberation Serif 12'" >> /etc/dconf/db/local.d/fonts

	/usr/bin/gsettings set org.gnome.shell favorite-apps '["org.gnome.Terminal.desktop","clip-gui.desktop"]'
	/usr/bin/sudo -u ${USERNAME} /usr/bin/gsettings set org.gnome.shell favorite-apps '["org.gnome.Terminal.desktop","clip-gui.desktop"]'
	/usr/bin/echo "[org/gnome/shell]" > /etc/dconf/db/local.d/favorites
	/usr/bin/echo 'favorite-apps=["org.gnome.Terminal.desktop","clip-gui.desktop"]' >> /etc/dconf/db/local.d/favorites

	/usr/bin/dconf update
fi

### START Breaking X 
# this chunk may break X/GNOME as it manually
# does things you wouldn't typically do in an effort
# to further lock-down the GUI environment.
#
# NOTE: please document every tweak so we know why
# when breakage occurs (and it will).
if [ x"$CONFIG_BUILD_BREAK_GUI" == "xy" ] && [ x"$CONFIG_BUILD_ENABLE_GUI" == "xy" ]; then

	# there are a few things we can't remove due to deep dep issues
	# e.g. bolt and wpa_supplicant are requried and the deps go all the
	# way back to gdm and gnome-shell
	if /usr/bin/rpm -q bolt > /dev/null; then
		/usr/bin/systemctl disable bolt
		/usr/bin/systemctl mask bolt
	fi 

	if /usr/bin/rpm -q wpa_supplicant > /dev/null; then
		/usr/bin/systemctl disable wpa_supplicant
		/usr/bin/systemctl mask wpa_supplicant
	fi

	# this causes both gdm and a user's gnome session
	# to name_connect to printer ports.
	# this might very well be a bad idea
	# so we definitely should do it.
	/usr/bin/chmod 000 /usr/libexec/gsd-print-notifications

	# when we make boltd unit, selecting the thundrebolt panel
	# causes gsettings to crash. )devices->thunderbolt panel)
	/usr/bin/rm -f /usr/share/applications/gnome-thunderbolt-panel.desktop

	# general clenliness (things we expect to never
	# be useful on most security-focused solutions
	# disable devices->wacom panel
	/usr/bin/rm -f /usr/share/applications/gnome-wacom-panel.desktop

	# disables sharing panel which provides the ability to
	# toggle screen sharing in our default config (sharing panel)
	/usr/bin/rm -f /usr/share/applications/gnome-sharing-panel.desktop

	# disable panel that lets users select how to handle removable media
	# when it is inserted (devices->removable media panel)
	/usr/bin/rm -f /usr/share/applications/gnome-removable-media-panel.desktop

	# gnome online accounts panel that let's you add accounts like google, flickr, etc
	# removing this used to work, but as of 7.6 it causes control-center to throw an assertion violation and bail
	#/usr/bin/rm -f /usr/share/applications/gnome-online-accounts-panel.desktop

	# disable bluetooth.
	/usr/bin/rpm -q bluez && rpm -e --nodeps bluez
	/usr/bin/rpm -q gnome-bluetooth && rpm -e --nodeps gnome-bluetooth
			
	# control center owns this file and if it is missing it won't open.
	# based on the error it seems like control center is hard-coded to select this panel
	# on startup and it fails if it is missing.
	#/usr/bin/rm -f /usr/share/applications/gnome-bluetooth-panel.desktop

	# disable printers panel. if present and clicked, it causes gnome control center (e.g. staff_t)
	# to try to connect to the IPP port. i think it is only connecting to localhost,
	# but still don't do that (devices->printers panel)
	/usr/bin/rm -f /usr/share/applications/gnome-printers-panel.desktop

	# disable panel for contolling user accounts such as enable auto-login,
	# changing a user to an admin, see who is logged in, etc. 
	# (details->users panel)
	# SRS: leaving this in-place so the GUI is somewhat still capable of performing
	# all admin tasks without needing a terminal.
	#/usr/bin/rm -f /usr/share/applications/gnome-user-accounts-panel.desktop

	# disable panel for controlling what is indexed for searching
	# (search panel)
	/usr/bin/rm -f /usr/share/applications/gnome-search-panel.desktop

	# (wifi panel)
	/usr/bin/rm -f /usr/share/applications/gnome-wifi-panel.desktop

	# privacy panel contains things like toggling location services, tracking app usage and history, etc.
	# (privacy panel)
	/usr/bin/rm -f /usr/share/applications/gnome-privacy-panel.desktop

	# notification panel controls the apps that can send notifications
	# (notifications panel)
	/usr/bin/rm -f /usr/share/applications/gnome-notifications-panel.desktop

	# disable panel allowing users to control which apps to open for various file types
	# (details->default applications)
	/usr/bin/rm -f /usr/share/applications/gnome-default-apps-panel.desktop

	# for some reason you can't simply remove support for VNC as this package is a dep
	# so force removal
	rpm -e --nodeps vino
fi
### STOP Breaking X 

# FIXME: this documentation stuff should be shifted into an RPM instead of here docs in a kickstart...
if [ x"$CONFIG_BUILD_ENABLE_GUI" == "xy" ]; then
cat <<-EOF > /usr/share/applications/clip-gui.desktop
[Desktop Entry]
	Name=CLIP GUI Information
	Comment=Important info regarding CLIP's GUI focusing on functional and security issues.
	Exec=xdg-open /usr/share/doc/clip-gui-notes.txt
	Icon=help-browser
	Terminal=false
	Type=Application
	Categories=Documentation
	Encoding=UTF-8
	X-Desktop-File-Install-Version=0.22
EOF

cat <<-EOF > /usr/share/doc/clip-gui-notes.txt
Important notes:

Packages:
1. We have removed a number of packages that would normall be installed in a GUI config, including 
packages that provide the "classic" theme which is the default in RHEL 7. Thus, you will see the default,
unthemed GNOME Shell interface.

2. If you enabled the CONFIG_BUILD_BREAK_GUI
feature, some packages were forcibly removed. This
might very well break things. When you encounter
a problem, try disabling this flag before you spend
too much time investigating the issue.

3. Unfortunately, some packages can't be removed that we
really want to remove, like GNOME Online Accounts
which can manage online accounts like Google and Facebook.
GDM has a hard dependency on this package and won't start
if it is missing.

4. We removed a bunch of fonts to keep
the ISO size down and perhaps mitigate
rendering bugs.

Security:
1. We apply the normal dconf/gsettings lockdowns. Checkout /etc/dconf/db/local.d/locks/settings
for a complete list of the locks we put in-place and /etc/dconf/db/local.d/* for the settings we
have applied before inserting the locks.

2. We have left user extensions enabled
which is apparently required to load system-level extensions (weird right?). However,
the extensions that can be loaded are still somewhat controlled by enabled-extensions
dconf setting and accompanying lock.

SELinux:

If you look at the audit logs after booting a GUI configuration of CLIP, you will notice a dbus denial. The denial
is from a location service called geoclue. The geoclue_t domain attempts to provide those location services via dbus
service org.freedesktop.GeoClue2, which can be seen by running 'ausearch -m user_avc'. Specifically it is trying to
"acuire_svc" on that identifier.

Our approach to dbus is that every single dbus service should have a specific label in dbus_contexts. We have
chosen to stick with the type of the service provider as the label for the service, thus NetworkManager's service
is labeled networkmanager_t.

If there is no specific label for a service in dbus_contexts, the default label is used, system_dbusd_t, and
permission denials will reflect that. But we don't want anyone to accidentally grant access to that type,
so this assertion is in-place to prevent users from accidentally doing that.

If you don't know what all this means, here is an example entry from config/appconfig-mcs/dbus_contexts:
       <associate
       own="org.freedesktop.NetworkManager"
       context="system_u:object_r:NetworkManager_t:s0"/>

This says that an application providing a service via org.freedesktop.NetworkManager
will be checked against the NetworkManager_t type. This applies to the
service provider who is performing acquire_svc to provide the service.

Note that send_msg checks are not performed by consulting the dbus_contexts file.
Once a a process has "acquired a service" a client may communicate with it
via send_msg. This check is done by dbus calling "getpeercon()" on the sending
process and the receiving processes to obtain the contexts of the service and client.

The policy would look something like this:
allow networkmanager_t self:dbus acquire_svc;
allow staff_t networkmanager_t:dbus send_msg;

Remember: 'ausearch -m user_avc' will help identify the service name. 

Remember: you might not want to allow access to a service. If that is the
case you have two options:
1. Do nothing and live with the denial as doing nothing still prevents
any access to the service, like we have done with genclue.

2. Add a label for the service to dbus_contexts, but still grant
no access to that label.

Note about permissive mode:
In permissive mode you may see denials that only pop-up when certain actions
are allowed as a direct result of being in permissive mode. Sometimes, you should
*NOT* add rules based on those denials. An example is denials from login managers
and gettys on the password and shadow files. Normally, when access is denied, PAM
falls back to running helper applications to manipulate the files. However, if it
can, PAM tries to modify those files without using the helpers. Thus, in permissive
mode you will see denials for the login applications accessing types like oshadow_t, 
passwd_t, shadow_t, ...

Don't add access based on these denials. If it worked in enforcing, consider not
adding the rules just because they appear in permissive mode. You might actually
be compromising the security of the system.

Misc:
1. We forcibly remove gnome-control-center panels, so you
will notice errors in the logs indicating it attempted to load
a panel but the panel's desktop file was missing. These errors
can be ignored.

2. Look at kickstart/includes/gui-config and kickstart/includes/gui-packages
for all of the stuff we're doing for configuring the GUI. If something is broken
these are the first two places to look. If you're looking at a deployed system,
look in /root/anaconda-ks.cfg and search for gnome_lock and conditional blocks controlled
by CONFIG_BUILD_ENABLE_GUI and CONFIG_BUILD_BREAK_GUI to review what was done to
configure the GUI during installation.

3. We have left the ability for the user to adjust network settings in-place. Similarly,
we have left the ability for the user to change Account Settings in-place. This is to strike
a balance between security and how the system works out of the box on a stock RHEL system.

You can disable certain things using GNOME extensions. CLIP contains a package called "clip-gnome-extensions"
that currently includes an extension to disable Account Settings. It is not enabled by default, but you can
add it to your kickstart to remove the Account Settings. You can also use the extension in that package as
a starting point for adding your own extensions.

Another recommendation is to start using policykit rules to restrict functionality. A few suggestions:

3a. You need to figure out the action being performed to add a rule for it. To aid in this, add this content
to /etc/polkit-1/rules.d/00-clip.rules:

polkit.addRule(function(action,subject) {
                polkit.log("action=" + action);
                polkit.log("subject=" + subject);
}
);

Then systemctl restart policykit and tail -f /var/log/secure. Finally, start poking
around in, e.g. the control center, to see what actions appear.

Then, when you find one you want to restrict, add something like this to 
/etc/polkit-1/rules.d/00-clip.rules:

polkit.addRule(function(action,subject) {
        if (action.id == "org.gnome.controlcenter.user-accounts.administration") {
                polkit.log("CLIP disables configuring account settings in GNOME using policykit.");
                return polkit.Result.NO;
        }
}
);

The rule above prevents admins from changing user account settings, including
enabling automatic login. We suggest doing this.

For a good time try exercising the network settings via control center with the
first rule in-place.

4. Adding users in CLIP should still be done via the command-line similar to these steps
for a privileged user during development:
semanage user -N -a -R toor_r -R staff_r -R sysadm_r -R system_r "USERNAME_u"
useradd -m "USERNAME" -G wheel
semanage login -N -a -s "USERNAME_u" "USERNAME"
passwd USERNAME
echo "USERNAME        ALL=(ALL) ROLE=toor_r TYPE=toor_t      ALL" >> /etc/sudoers

EOF
fi
